name: Build and test app

on:
  push:
    branches:
      - 'develop'
      - 'release/*'

jobs:
  unitTest:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle.kts') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/src/main/kotlin/Library.kt') }}

      - name: Unit tests
        run: bash ./gradlew test
      - name: Report build status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          title: "Unit tests"
          webhook: ${{ secrets.DISCORD_BUILD_STATUS_WEBHOOK }}

  apk:
    name: Generate APK
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1

      - name: Update Run Number in properties
        uses: christian-draeger/write-properties@1.0.1
        with:
          path: gradle.properties
          property: RUN_NUMBER
          value: ${{ github.run_number }}

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle.kts') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/src/main/kotlin/Library.kt') }}

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Make .android folder
        run: mkdir /home/runner/.android

      - name: Create debug keystore
        run: |
          echo "${{ secrets.CI_KEYSTORE }}" > debug.keystore.asc
          gpg -d --passphrase "${{ secrets.CI_KEYSTORE_DECRYPT }}" --batch debug.keystore.asc > /home/runner/.android/debug.keystore

      - name: Build debug APK
        run: bash ./gradlew assembleCi --stacktrace

      - name: set apk name env
        run: echo "APK_NAME=$(basename app/build/outputs/apk/ci/*.apk .apk)" >> $GITHUB_ENV

      - name: Upload APK
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.APK_NAME }}
          path: app/build/outputs/apk/ci/${{ env.APK_NAME }}.apk

      - name: Upload to Discord
        uses: sinshutu/upload-to-discord@v2.0.0
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: app/build/outputs/apk/ci/${{ env.APK_NAME }}.apk

      - name: Report build status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          title: "Build apk"
          webhook: ${{ secrets.DISCORD_BUILD_STATUS_WEBHOOK }}

    instrumentationTests:
      name: Run instrumentation tests
      runs-on: macOS-latest
      steps:
        - name: checkout
          uses: actions/checkout@v2

        # Restore the cache.
        # Intentionally don't set 'restore-keys' so the cache never contains redundant dependencies.
        - uses: actions/cache@v2
          with:
            path: ~/.gradle/caches
            key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle.kts') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/src/main/kotlin/Library.kt') }}

        - name: run tests
          uses: reactivecircus/android-emulator-runner@v2
          with:
            api-level: 29
            script: ./gradlew connectedCheck

        - name: Report build status to Discord
          uses: sarisia/actions-status-discord@v1
          if: always()
          with:
            title: "Instrumentation tests"
            webhook: ${{ secrets.DISCORD_BUILD_STATUS_WEBHOOK }}